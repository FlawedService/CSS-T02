 package business;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
/**
 * A Department
 * @author css017
 *
 */
@Entity
@NamedQuery(name=Department.FIND_BY_DEPARTMENT_ID, query="SELECT f FROM Department f WHERE f.id = :" + Department.ID)
public class Department {

	// Named query name constants
	public static final String FIND_BY_DEPARTMENT_ID = "Department.getId";
	public static final String ID = "id";

	/**
	 * Table auto generated id for department
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.TABLE)
	private int id;

	/**
	 * Name of the department
	 */
	@Column(nullable = false)
	private String name;

	/**
	 * Phone number of the Department
	 */
	@Column(nullable = false)
	private int phoneNumber;

	/**
	 * list of employees from the department
	 */
	
	@JoinColumn @OneToMany(cascade = CascadeType.ALL)
	private List<Employee> employees = new ArrayList<Employee>();

	/**
	 * The ID corresponding to the manager of the Department
	 */
	@Column(nullable = false)
	private int managerId;
	
	/**
	 * 
	 * @param name
	 * @param phoneNumber
	 */
	public Department(String name, int phoneNumber, int managerId){
		this.managerId = managerId;
		this.name = name;
		this.phoneNumber = phoneNumber;
	}

	/**
	 * Constructor need by Jpa
	 */
	Department() {
	}
	
	
	//Getters and Setters
	
	
	/**
	 * @return the id auto generated by the Table
	 */
	public int getId() {
		return id;
	}

	/**
	 * @param id of the Department
	 */
	public void setId(int id) {
		this.id = id;
	}

	/**
	 * @return name of the department
	 */
	public String getName() {
		return name;
	}

	/**
	 * @param name of the Department
	 */
	public void setName(String name) {
		this.name = name;
	}
	/**
	 * 
	 * @return phone number of the Department
	 */
	public int getPhoneNumber() {
		return phoneNumber;
	}
	/**
	 * 
	 * @param phoneNumber of the Department
	 */
	public void setPhoneNumber(int phoneNumber) {
		this.phoneNumber = phoneNumber;
	}
	/**
	 * 
	 * @return the department manager id
	 */
	public int getManagerId(){
		return managerId;
	}
	
	//public void setManager(int managerId){
		//this.managerId = managerId;
		
		/*if (!isOpen())
			throw new ApplicationException("Cannot add products to a closed sale.");

		// if there is enough stock
		if (product.getQty() >= qty) {
			// adds product to sale
			product.setQty(product.getQty() - qty);
			saleProducts.add(new SaleProduct(product, qty));
		} else
			throw new ApplicationException("Product " + product.getProdCod() + " has stock ("  + 
							product.getQty() + ") which is insuficient for the current sale");*/




	@Override
	public String toString() {
		StringBuilder memb = new StringBuilder(" ");
		for(Employee e: employees)
			memb.append(e.getId()+" ");
		return name+" ("+id+") with members ["+memb.toString()+"]";
	}

}